// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/azaliaz/subs-api/internal/storage"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockSubscriptionsStorage is a mock of SubscriptionsStorage interface.
type MockSubscriptionsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionsStorageMockRecorder
}

// MockSubscriptionsStorageMockRecorder is the mock recorder for MockSubscriptionsStorage.
type MockSubscriptionsStorageMockRecorder struct {
	mock *MockSubscriptionsStorage
}

// NewMockSubscriptionsStorage creates a new mock instance.
func NewMockSubscriptionsStorage(ctrl *gomock.Controller) *MockSubscriptionsStorage {
	mock := &MockSubscriptionsStorage{ctrl: ctrl}
	mock.recorder = &MockSubscriptionsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionsStorage) EXPECT() *MockSubscriptionsStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubscriptionsStorage) Create(ctx context.Context, request *storage.CreateRequest) (*storage.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(*storage.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSubscriptionsStorageMockRecorder) Create(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubscriptionsStorage)(nil).Create), ctx, request)
}

// Delete mocks base method.
func (m *MockSubscriptionsStorage) Delete(ctx context.Context, request *storage.DeleteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubscriptionsStorageMockRecorder) Delete(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubscriptionsStorage)(nil).Delete), ctx, request)
}

// GetInfo mocks base method.
func (m *MockSubscriptionsStorage) GetInfo(ctx context.Context, id uuid.UUID) (*storage.GetInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, id)
	ret0, _ := ret[0].(*storage.GetInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockSubscriptionsStorageMockRecorder) GetInfo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockSubscriptionsStorage)(nil).GetInfo), ctx, id)
}

// GetTotalSubscriptionsPrice mocks base method.
func (m *MockSubscriptionsStorage) GetTotalSubscriptionsPrice(ctx context.Context, request *storage.TotalRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalSubscriptionsPrice", ctx, request)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalSubscriptionsPrice indicates an expected call of GetTotalSubscriptionsPrice.
func (mr *MockSubscriptionsStorageMockRecorder) GetTotalSubscriptionsPrice(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalSubscriptionsPrice", reflect.TypeOf((*MockSubscriptionsStorage)(nil).GetTotalSubscriptionsPrice), ctx, request)
}

// List mocks base method.
func (m *MockSubscriptionsStorage) List(ctx context.Context, request *storage.ListRequest) (*storage.ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, request)
	ret0, _ := ret[0].(*storage.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSubscriptionsStorageMockRecorder) List(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSubscriptionsStorage)(nil).List), ctx, request)
}

// Update mocks base method.
func (m *MockSubscriptionsStorage) Update(ctx context.Context, id uuid.UUID, req *storage.UpdateRequest) (*storage.UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, req)
	ret0, _ := ret[0].(*storage.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSubscriptionsStorageMockRecorder) Update(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSubscriptionsStorage)(nil).Update), ctx, id, req)
}
